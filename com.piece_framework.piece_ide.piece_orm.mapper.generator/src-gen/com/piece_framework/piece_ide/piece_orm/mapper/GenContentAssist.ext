import piece_orm_mapper;
import codeassist;

extension com::piece_framework::piece_ide::piece_orm::mapper::EditorExtensions;

/* proposals for Feature Query::value */
List[Proposal] completeQuery_value(emf::EObject ctx, String prefix) :
	{newProposal("QueryValue")};

/* proposals for Feature Method::name */
List[Proposal] completeMethod_name(emf::EObject ctx, String prefix) :
	{newProposal("MethodName")};

/* proposals for Feature Association::name */
List[Proposal] completeAssociation_name(emf::EObject ctx, String prefix) :
	{newProposal("AssociationName")};

/* proposals for Feature ThroughInverseColumn::value */
List[Proposal] completeThroughInverseColumn_value(emf::EObject ctx, String prefix) :
	{newProposal("ThroughInverseColumnValue")};

/* proposals for Feature Table::value */
List[Proposal] completeTable_value(emf::EObject ctx, String prefix) :
	{newProposal("TableValue")};

/* proposals for Feature ReferencedColumn::value */
List[Proposal] completeReferencedColumn_value(emf::EObject ctx, String prefix) :
	{newProposal("ReferencedColumnValue")};

/* proposals for Feature OrderBy::value */
List[Proposal] completeOrderBy_value(emf::EObject ctx, String prefix) :
	{newProposal("OrderByValue")};

/* proposals for Feature ThroughColumn::value */
List[Proposal] completeThroughColumn_value(emf::EObject ctx, String prefix) :
	{newProposal("ThroughColumnValue")};

/* proposals for Feature ThroughTable::value */
List[Proposal] completeThroughTable_value(emf::EObject ctx, String prefix) :
	{newProposal("ThroughTableValue")};

/* proposals for Feature ThroughReferencedColumn::value */
List[Proposal] completeThroughReferencedColumn_value(emf::EObject ctx, String prefix) :
	{newProposal("ThroughReferencedColumnValue")};

/* proposals for Feature Column::value */
List[Proposal] completeColumn_value(emf::EObject ctx, String prefix) :
	{newProposal("ColumnValue")};



/* proposals for Feature Type::value */
List[Proposal] completeType_value(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Method::methodFeatures */
List[Proposal] completeMethod_methodFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Through::throuthFeatures */
List[Proposal] completeThrough_throuthFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Through::throuthFeatures */
List[Proposal] completeThrough_throuthFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Through::throuthFeatures */
List[Proposal] completeThrough_throuthFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Association::associationFeatures */
List[Proposal] completeAssociation_associationFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Through::throuthFeatures */
List[Proposal] completeThrough_throuthFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Method::methodFeatures */
List[Proposal] completeMethod_methodFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Association::associationFeatures */
List[Proposal] completeAssociation_associationFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Mapper::methods */
List[Proposal] completeMapper_methods(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Method::methodFeatures */
List[Proposal] completeMethod_methodFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Association::associationFeatures */
List[Proposal] completeAssociation_associationFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Association::associationFeatures */
List[Proposal] completeAssociation_associationFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Associations::associations */
List[Proposal] completeAssociations_associations(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Association::associationFeatures */
List[Proposal] completeAssociation_associationFeatures(emf::EObject ctx, String prefix) :
	{};

/* proposals for Feature Association::associationFeatures */
List[Proposal] completeAssociation_associationFeatures(emf::EObject ctx, String prefix) :
	{};






List[Proposal] sortProposals(List[Proposal] proposalsToSort):
	proposalsToSort;

isKeywordProposal(Proposal this):
	type == codeassist::Type::KEYWORD;

isAssignmentProposal(Proposal this):
	type == codeassist::Type::ASSIGNMENT;
	
isEnumProposal(Proposal this):
	type == codeassist::Type::ENUM_LITERAL;

// create extensions
Proposal newProposal(String proposal) :
	newProposal(proposal,proposal);
	
Proposal newProposal(String label, String toReplace) :
	newProposal(label,toReplace,"default.gif");
	
create Proposal newProposal(String label, String replace, String image) :
	setLabel(label==null?"ERROR":label)->
	setToInsert(replace==null?"ERROR":replace)->
	setImage(image);
